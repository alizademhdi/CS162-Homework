1.
gcc -m32 -S -o map.S map.c
gcc -m32 -S -o recurse.S recurse.c

#i-1
movl    8(%ebp), %eax
subl    $1, %eax
subl    $12, %esp

#call
pushl   %eax
call    recur


2.
gcc -m32 -c map.S -o map.obj
gcc -m32 -c recurse.S -o recurse.obj

NOTE:
There is no section named .section and as said on Discord it's a typographical mistakes!

.text:
In fact, this section contains the instruction of the program.

.data:
In this section, the variables inside the program are defined and set.


3.
objdump -t [fileName]

for example:
objdump -t map.obj

result:
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 map.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .text.__x86.get_pc_thunk.bx	00000000 .text.__x86.get_pc_thunk.bx
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .eh_frame	00000000 .eh_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .group	00000000 .group
00000004       O *COM*	00000004 foo
00000000 g     O .data	00000004 stuff
00000000 g     F .text	00000060 main
00000000 g     F .text.__x86.get_pc_thunk.bx	00000000 .hidden __x86.get_pc_thunk.bx
00000000         *UND*	00000000 _GLOBAL_OFFSET_TABLE_
00000000         *UND*	00000000 malloc
00000000         *UND*	00000000 recur


4.
*UND*:
If the symbol is used in this section or is referenced but not defined in this file (for example, it is defined in another file), 
that symbol will be set to the UND flag.
g:
The symbol is global.
O:
The symbol is the name of an object.


5.
for this section we can use -r flag in objdump command.
-r:
Print the relocation entries of the file.

example:
objdump -r map.obj
RELOCATION RECORDS FOR [.text]:
OFFSET   TYPE              VALUE 
00000013 R_386_PC32        __x86.get_pc_thunk.bx
00000019 R_386_GOTPC       _GLOBAL_OFFSET_TABLE_

0000002a R_386_PLT32       malloc
0000003a R_386_PLT32       malloc
0000004a R_386_PLT32       recur



RELOCATION RECORDS FOR [.eh_frame]:
OFFSET   TYPE              VALUE 
00000020 R_386_PC32        .text
00000054 R_386_PC32        .text.__x86.get_pc_thunk.bx


6.
We can see the recurv symbol again in the recurse.c file.
and we can also view the symbol table of this file using the "objdump -t recurse.obj" command

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 recurse.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .text.__x86.get_pc_thunk.ax	00000000 .text.__x86.get_pc_thunk.ax
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .eh_frame	00000000 .eh_frame
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .group	00000000 .group
00000000 g     F .text	00000052 recur
00000000 g     F .text.__x86.get_pc_thunk.ax	00000000 .hidden __x86.get_pc_thunk.ax
00000000         *UND*	00000000 _GLOBAL_OFFSET_TABLE_
00000000         *UND*	00000000 printf


7.
gcc -m32 map.obj recurse.obj -o map

